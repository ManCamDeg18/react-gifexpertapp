{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAGE,mCACE,sBAAMC,SAdW,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MASd,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAtBkB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,e,+BCNdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAGrCa,QAAQC,IAAIR,GAXO,kBAYbA,GAZa,4CAAH,sDCCPS,EAAc,SAAC,GAAiB,IAAhBL,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEjC,OACE,sBAAKgB,UAAU,yCAAf,UACE,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCHGS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAQvB,ECR0B,SAACA,GAE3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAW,WAET1B,EAAQC,GACL0B,MAAK,SAAAC,GAEJC,YAAW,WACTb,QAAQC,IAAIW,GACZH,EAAS,CACPjB,KAAMoB,EACNL,SAAQ,MAGT,UAIP,CAACtB,IAEIuB,EDjBwBM,CAAa7B,GAAhCa,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAEpB,OACE,qCACE,6BACKtB,IAEJsB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SAGML,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADGA,EAAIC,aErBdmB,EAAe,WAK1B,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KASA,OAEE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEI8C,EAAWtB,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCxBnBgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.fe2c1753.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropsTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log('Submit hecho')\n    if(inputValue.trim().length > 2){\n      setCategories(cats => [inputValue,...cats]);\n      setInputValue('');\n    }\n\n  }\n\n  return (\n\n\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n\n        />\n      </form>\n    </>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories : PropsTypes.func.isRequired\n}\n","\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=hyIkz0IlLm3ZnyftYOpPgkxaGzIuWzO5`;\n    const respuesta = await fetch(url);\n    const {data} = await respuesta.json();\n    const gifs = data.map(img => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url\n      }\n    })\n    console.log(gifs);\n   return gifs;\n}\n","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n  // const [images, setImages] = useState([])\n  // useEffect( () => {\n  //   getGifs(category)\n  //     .then(imgs => setImages(imgs))\n  // },[category]);\n\n  const {data:images, loading} = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>\n          {category}\n      </h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n\n          {\n            images.map( img => (\n              <GifGridItem\n                key = {img.id}\n                {...img}\n              />\n            ))\n          }\n      </div>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setstate] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n\n    getGifs(category)\n      .then(imgs => {\n\n        setTimeout(() => {\n          console.log(imgs)\n          setstate({\n            data: imgs,\n            loading:false\n          });\n\n        }, 3000);\n\n      })\n\n  },[category])\n\n  return state;\n}\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n\n  // const categories = [];\n\n  const [categories, setCategories] = useState(['One punch']);\n\n\n  // const nueva = 'Boku no Hero';\n  // const handleAdd = () => {\n  //   setCategories([...categories, nueva])\n  // }\n\n\n  return (\n\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories = {setCategories}/>\n      <hr />\n\n      <ol>\n        {\n          categories.map((category) =>\n            <GifGrid\n              key={category}\n              category={category}\n            />\n          )\n        }\n\n      </ol>\n    </>\n\n  );\n\n\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// Gi\n\n"],"sourceRoot":""}